

#include <iostream>
#include <vector>
#include <algorithm>
#include<map>
using namespace std;


//已知前序和中序求后序
vector<int> pre,in;
vector<int> post;

void postOrder(int prel,int inl,int inr){
	
	if(inl>inr){
		return ;
	}
	int i = inl;
	while(in[i]!=pre[prel]){
		i++;
	}
	postOrder(prel+1,inl,i-1);
	postOrder(prel+1+i-inl,i+1,inr);
	post.push_back(in[i]);
	 
}

int main(){
	int n;
	scanf("%d",&n);
	
	pre.resize(n);
	in.resize(n);
	for(int i = 0;i<n;i++){
		cin>>pre[i];
		
	}  
	for(int i = 0;i<n;i++){
		cin>>in[i];
		
	}
	postOrder(0,0,n-1);
	for(int i = 0;i<post.size() ;i++){
		cout<<post[i]<<" ";
		
	}
	return 0;
}

//已知后序中序转前序
vector<int> pre,in;
vector<int> post;

void preOrder(int root,int inl,int inr){
	
	if(inl>inr){
		return ;
	}

	int i = inl;
	while(i<inr&&in[i]!=post[root]){
		i++;
	}
	pre.push_back(post[root]) ;
	preOrder(root-1-inr+i,inl,i-1);
	preOrder(root-1,i+1,inr);
	
	 
}

int main(){
	int n;
	scanf("%d",&n);
	
	post.resize(n);
	in.resize(n);
	 
	for(int i = 0;i<n;i++){
		cin>>in[i];
	}
	
	for(int i = 0;i<n;i++){
		cin>>post[i];
	} 
	
	preOrder(n-1,0,n-1);
	for(int i = 0;i<pre.size() ;i++){
		cout<<pre[i]<<" ";
	}
	return 0;
}



//后序中序转层序
struct node{
	int index,value;
	
};
bool cmp(node a,node b){
	return a.index <b.index ;
	
}
vector<int> in;
vector<int> post;
vector<node> ans;
 
void preOrder(int root,int inl,int inr,int index){
	
	if(inl>inr){
		return ;
	}

	int i = inl;
	while(i<inr&&in[i]!=post[root]){
		i++;
	}
    ans.push_back({index,post[root]});
	 
	preOrder(root-1-inr+i,inl,i-1,2 * index + 1);
	preOrder(root-1,i+1,inr,2 * index + 2);
	
	 
}

int main(){
	int n;
	scanf("%d",&n);
	
	post.resize(n);
	in.resize(n);
	 
	
	
	for(int i = 0;i<n;i++){
		cin>>post[i];
	} 
	for(int i = 0;i<n;i++){
		cin>>in[i];
	}
	
	preOrder(n-1,0,n-1,0);
	sort(ans.begin() ,ans.end() ,cmp);
	
	for(int i = 0;i<ans.size() ;i++){
		cout<<ans[i].value<<" ";
	}
	return 0;
}


//已知层序和中序转前序和后序


int sum = 0;
vector<int> preorder, inorder, postorder, levelorder;

void getpreorder(vector<int> v, int instart,int inend){
	if(v.size() == 0){
		return ;
	}
	
	int i = 0;
	
	while(inorder[instart+i]!=v[0]){
		i++;
	}
	
	vector<int> v1,v2,v3;
	for(int j = instart; j <= instart + i -1; j++){
		v1.push_back(inorder[j]);
	}
	
	for(int j = 1;j<v.size() ;j++){
		if(find(v1.begin() ,v1.end() ,v[j])!=v1.end() ){
			v2.push_back(v[j]);
			 
		}else{
			v3.push_back(v[j]);
			 
		}
	}
	preorder.push_back(v[0]);
	getpreorder(v2,instart,instart + i -1);
	getpreorder(v3,instart+i+1,inend);
}

void getpostorder(vector<int> v, int instart,int inend){
	if(instart > inend){
		return ;
	}
	
	int i = 0;
	
	while(inorder[instart+i]!=v[0]){
		i++;
	}
	
	vector<int> v1,v2,v3;
	for(int j = instart; j <= instart + i -1; j++){
		v1.push_back(inorder[j]);
	}
	
	for(int j = 1;j<v.size() ;j++){
		if(find(v1.begin() ,v1.end() ,v[j])!=v1.end() ){
			v2.push_back(v[j]);
			 
		}else{
			v3.push_back(v[j]);
			 
		}
	}
	
	getpostorder(v2,instart,instart + i -1);
	getpostorder(v3,instart+i+1,inend);
	postorder.push_back(v[0]);
}

int main(){
	int n;
	cin>>n;
	
	for(int i = 0;i<n;i++){
		int item;
		cin>>item;
		levelorder.push_back(item);
	}
	
	for(int i = 0;i<n;i++){
		int item;
		cin>>item;
		inorder.push_back(item);
	}
	
	getpreorder(levelorder, 0 , n - 1);
	getpostorder(levelorder, 0 , n - 1);
	
	for (int i = 0; i < preorder.size(); i++) {
		printf("%d ", preorder[i]);
	}
	
	cout << endl;
	
	for (int i = 0; i < postorder.size(); i++) {
		printf("%d ", postorder[i]);
	}

	return 0;
} 



















