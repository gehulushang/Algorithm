
//给出二叉搜索树的插入序列，求两个节点的最低公共祖先

map<int,bool> mp;

int main(){
	int m,n,u,v,a;
	cin>>m>>n;
	vector<int> pre(n);
	for(int i = 0;i<n;i++){
		cin>>pre[i];
		mp[pre[i]] = true;
		
	}
	for(int i = 0;i<m;i++){
		cin>>u>>v;
		for(int j = 0;j<n;j++){
			a = pre[j];
			if((a>=u&&a<=v)||(a>=v&&a<=u)){
				break;
				
			}
			
		}
		if(mp[u]==false&&mp[v]==false){
			printf("ERROR: %d and %d are not found.\n",u,v);
			
		}else if(mp[u]==false||mp[v]==false){
			printf("ERROR: %d is not found.\n", mp[u] == false ? u : v);
		}else if(a==u||a==v){
			printf("%d is an ancestor of %d.\n", a, a == u ? v : u);
		}else{
			printf("LCA of %d and %d is %d.\n", u, v, a);
		}
	}
	return 0;
}



//给出二叉树的中序和前序，求两个点的最低公共祖先
map<int,int> pos;
vector<int> in,pre;
void lca(int inl,int inr,int preRoot,int a,int b){
	if(inl>inr){
		return ;
	}
	int inRoot = pos[pre[preRoot]],aIn = pos[a],bIn = pos[b];
	if(aIn<inRoot&&bIn<inRoot){
		lca(inl,inRoot-1,preRoot+1,a,b);
	}else if((aIn<inRoot&&bIn>inRoot)||(aIn>inRoot&&bIn<inRoot)){
		printf("LCA of %d and %d is %d.\n", a, b, in[inRoot]);
	}else if((aIn>inRoot&&bIn>inRoot)){
		lca(inRoot+1,inr,preRoot+1+(inRoot-inl),a,b);
	}else if(aIn == inRoot){
		printf("%d is an ancestor of %d.\n", a, b);
	}else if(bIn == inRoot){
		printf("%d is an ancestor of %d.\n", b, a);
	}
}
int main(){
	int m,n,a,b;
	cin>>m>>n;
	
	in.resize(n+1),pre.resize(n+1);
	for(int i = 1;i<=n;i++){
		cin>>in[i];
		pos[in[i]] = i;
		
	}  
	for(int i = 1;i<=n;i++){
		cin>>pre[i];
		
	}
	for(int i = 0;i<m;i++){
		cin>>a>>b;
		if(pos[a]==0&&pos[b]==0){
			printf("ERROR: %d and %d are not found.\n", a, b);
		}else if(pos[a]==0||pos[b]==0){
			printf("ERROR: %d is not found.\n", pos[a] == 0 ? a : b);
		}else{
			lca(1, n, 1, a, b);
		}
	}
	return 0;
}
